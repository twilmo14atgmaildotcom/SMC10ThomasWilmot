function data = import_NihonKohden(fn,pn,ToSave)
%% import_NihonKohden.m
% created 2012         
% last updated 2012-06-12  
% by Lukas Kneisz
%------------------------
% history of changes
% [1] - Excluded function statement, inserted Load Data functionality
% [2] - Inserted conversion to .wav file
% [3] - Updated gain correction factor which was determined from a screen
% captured image.
% ...
%------------------------
% Last update december 2013
% by Hooman Sedghamiz
%------------------------
% Changes : 
% [1] Now it is possible to select several files at once and convert them.
% [2] The script looks into the file to find the muscle name
% [3] The Files from Szeged had a bug in that the sample rate unit was not
% specified so, a flag is used to differantiate it from other centers
%------------------------
%Description: Importing txt Files generated by Nihon-Kohden EMG Systems to
%Matlab and converting data to WAV files for postprocessing with Audacity
%------------------------

%To use as function uncomment the following line
%function [data, fs, lo, hi] = importEMGera(fileToRead)
%IMPORTFILE(FILETOREAD)
%  Imports data from the specified file
%  FILETOREAD:  file to read

%% Latest Update:
% Hooman Sedghamiz 
% June 2015
% Made compatible for GUI use and Now normalizes to unit variance
%% Algorithm is based on the following paper :
% H. Sedghamiz and Daniele Santonocito,'Unsupervised Detection and
% Classification of Motor Unit Action Potentials in Intramuscular 
% Electromyography Signals', The 5th IEEE International Conference on
% E-Health and Bioengineering - EHB 2015, At Iasi-Romania.
%% Author: 
% Hooman Sedghamiz
% June 2015, Linkoping University
% Please cite the paper if any of the methods were helpfull



%% multiple selection on
if nargin < 2
    ToSave = 1;
    if nargin < 1
    [fn, pn] = uigetfile('*.txt',...
    'Load text File(You can select several files(hit Cntr and select files))',...
    'MultiSelect', 'on');  
    end
end
current_p = pwd;
cd(pn);
if isstr(fn)
 fn ={fn};
end


%% start to loop in data
fprintf('%d Text files loaded...\n',length(fn));
for f_c = 1:length(fn)

fileToRead = [pn fn{1,f_c}];
    

%%

DELIMITER = ',';

% Import the file
fid = fopen(fileToRead, 'r');                         % open Nihon Kohden export file

ar = 0;                                               % initialize some variables
lo = 0;
hi = 0;
fs = 0;
Mus_n = [];
search_m = 1;                                          %looks for muscle name
while 42 == 42
    str = fgetl(fid);                                  % read line from export file
    if (str == -1), break, end;                        % exit while loop if we can't read more lines from the file
    if (str(1) ~= '"'), break, end;                    % exit while loop if data block is reached

    if (isempty(strfind(str, '"Sens. ')) == 0)         % check for amplifier range
        a = strfind(str, DELIMITER);                   % search delimiters of code
        sc = str2double(str(a(1)+1:a(2)-1));           % extract number
        un = str(a(2)+2:length(str)-1);                % extract unit
        if strcmp(un,'uV')                             % convert number to mV
            sc = sc/1000.;
        elseif strcmp(un,'V')
            sc = sc*1000.;
        end
        ar = [ar sc];                                  % add number to list of channel sensitivities
    end
    if (isempty(strfind(str, '"Hi-')) == 0)            % check for upper cut frequency
        a = strfind(str, DELIMITER);
        sc = str2double(str(a(1)+1:a(2)-1));           % extract number
        un = str(a(2)+2:length(str)-1);                % extract unit
        if strcmp(un,'kHz')                            % convert number to Hz
            sc = sc*1000.;
        end
        hi = [hi sc];                                  % add number to list of channel cut frequencies
    end
    if (isempty(strfind(str, '"Lo-')) == 0)            % check for lower cut frequency
        a = strfind(str, DELIMITER);
        sc = str2double(str(a(1)+1:a(2)-1));           % extract number
        un = str(a(2)+2:length(str)-1);                % extract unit
        if strcmp(un,'kHz')                            % convert number to Hz
            sc = sc*1000.;
        end
        lo = [lo sc];                                  % add number to list of channel cut frequencies
    end
    if (isempty(strfind(str, '"Sampli')) == 0)         % check for sample rate
        a = strfind(str, DELIMITER);                   % search delimiters of code
        sc = 1./str2double(str(a(1)+1:a(2)-1));        % extract number, convert in frequency
        un = str(a(2)+2:length(str)-1);                % extract unit
        if strcmp(un,'us')                             % convert number to Hz
            sc = sc*1000000.;
        elseif strcmp(un,'ms')
            sc = sc*1000.;
        elseif strcmp(un,'ns')
            sc = sc*1000000000.;
        else
            sc = sc*1000000.;                          %(in szeged there is no unit in export file)
        end
        fs = [fs sc];                                  % add number to list of channel sample rates
    end
    
    if (~isempty(strfind(str, '"Muscle'))) && search_m            %check for the name of the muscle
        a = strfind(str, DELIMITER);                   %add the name if not empty
        if length(str)-a(1) >= 3
        sc = str(a(1)+2:end-1);
        sc = sc(find(~isspace(sc)));
        Mus_n = sc;
        search_m = 0;                                  %Stops searching for muscle name
        else
        Mus_n = [];    
        end
    end
end % while loop header

if ~isempty(Mus_n)
    fn_new = strcat(Mus_n,'_',fn{1,f_c}); %add the musclename
else 
    fn_new = fn{1,f_c};
end

fn_new = fn_new(find(~isspace(fn_new))); %remove whitespaces
fn_new(fn_new == '.') = [];              %remove dots
fn_new(fn_new == '-') = [];              %remove slashes
if length(fn_new)> 41                   %if length of the string is longer than 41  
   fn_new = fn_new(length(fn_new)-41:end);
end
ar = ar(2:end);                 % remove dummy channel
lo = lo(2:end);
hi = hi(2:end);
fs = fs(2:end);

nCh = numel(ar);                % number of channels

fprintf('Header imported, %d channels\n',nCh);

data = zeros(1000,nCh);         % pre-allocate some memory
x   = 0;                        % count number of datasets

while 42 == 42
    x = x+1;                                            % increase line counter
    if mod(x,1000) == 1                                 % adaptively increase array, saves some time
        data = [data' zeros(nCh,1000) ]';
        fprintf('%d samples\n',x);
    end
    a = textscan(str,'%f','Delimiter',DELIMITER);
    data(x,:) = a{1}(2:nCh+1);
    str = fgetl(fid);                                   % read line from export file
    if isempty(strfind(str, DELIMITER)), break, end;    % exit while loop if end of data block is reached
end % while loop data

fclose(fid);

data = data(1:x,:);
%% Normalize to unit variance for the best visualization 
for ch=1:nCh
    
         data(:,ch) = data(:,ch) - mean(data(:,ch));
         data(:,ch) = data(:,ch)/std(data(:,ch));     
  
end

%%

 if ToSave
   fileToRead = fn_new(1:(end-3));
   save(fileToRead, 'data','fs','lo','hi');
   audiowrite([fn_new(1:(end-3)) '.wav'],data,fs(1,1));
 end
fprintf('Text file number %d,exported \n',f_c);
temp = data;
clear data;
data.data = temp;
data.Fs = fs;
end
cd(current_p);


